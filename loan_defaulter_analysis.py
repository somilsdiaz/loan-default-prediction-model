# -*- coding: utf-8 -*-
"""Análisis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14HIGQvzDAHZXQNNfwIh1IZpd5KMWpCC7

#Data Overview:
"""

import pandas as pd

import gdown
#ID del archivo de google drive
file_id = '1LB3tcbqvyRHZWiJcfxB-1fcZNmO1Wi-g'
destination = 'application_data.csv'

#url para descargar
gdown.download(f'https://drive.google.com/uc?export=download&id={file_id}', destination, quiet=False)

data = pd.read_csv(destination)
data.head()

# Re-load the CSV file to explore its contents
url = 'application_data.csv'
data = pd.read_csv(url)

# Display the first few rows of the dataset to understand its structure
data.head()

columns_to_keep = ['TARGET', 'NAME_CONTRACT_TYPE', 'CODE_GENDER', 'FLAG_OWN_CAR',
                   'FLAG_OWN_REALTY', 'CNT_CHILDREN', 'AMT_INCOME_TOTAL',
                   'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE',
                   'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',
                   'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE',
                   'DAYS_BIRTH', 'DAYS_EMPLOYED', 'ORGANIZATION_TYPE']
data = data[columns_to_keep]

data.head()

data.to_csv('data.csv', index=False)

"""# Data Visualization

> Distribución de la variable objetivo
"""

data.columns

import matplotlib.pyplot as plt

# Contar la cantidad de ocurrencias de cada categoría en la columna TARGET
target_counts = data['TARGET'].value_counts()

# Crear un gráfico de pastel con dos tonos de azul
plt.figure(figsize=(6,6))
plt.pie(target_counts, labels=target_counts.index, autopct='%1.1f%%', startangle=90, colors=['#1f77b4', '#aec7e8'])  # Dos tonos de azul
plt.title('TARGET Distribution')
plt.axis('equal')  # Para asegurar que el gráfico de pastel sea un círculo
plt.show()

import matplotlib.pyplot as plt

data['TARGET'].value_counts().plot(kind='bar')
plt.title('Distribution of the Target Variable')
plt.xlabel('TARGET')
plt.ylabel('Frecuencia')
plt.show()

"""

> Comparación del tipo de contrato y dificultades de pago

"""

import seaborn as sns

sns.countplot(data=data, x='NAME_CONTRACT_TYPE', hue='TARGET')
plt.title('Contract Type vs TARGET')
plt.show()

"""

> Distribución de género

"""

data['CODE_GENDER'].value_counts().plot(kind='bar')
plt.title('Gender Distribution')
plt.xlabel('CODE_GENDER')
plt.ylabel('Frecuencia')
plt.show()

sns.countplot(data=data, x='CODE_GENDER', hue='TARGET')
plt.title('Gender vs TARGET')
plt.show()

"""

> Relación entre posesión de coche y casa con el objetivo

"""

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

sns.countplot(data=data, x='FLAG_OWN_CAR', hue='TARGET', ax=axes[0])
axes[0].set_title('Car Ownership vs TARGET')

sns.countplot(data=data, x='FLAG_OWN_REALTY', hue='TARGET', ax=axes[1])
axes[1].set_title('Real Estate Ownership vs TARGET')

plt.tight_layout()
plt.show()

"""

> Número de hijos y dificultades de pago

"""

sns.countplot(data=data, x='CNT_CHILDREN', hue='TARGET')
plt.title('Number of Children vs TARGET')
plt.show()

"""

> Distribución de ingresos

"""

sns.histplot(data=data, x='AMT_INCOME_TOTAL', bins=10)
plt.title('Income Distribution')
plt.show()

"""

> Comparación del importe del crédito entre clientes con dificultades y sin ellas

"""

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

sns.boxplot(data=data, x='TARGET', y='AMT_CREDIT', ax=axes[0])
axes[0].set_title('Credit Amount vs TARGET')

sns.boxplot(data=data, x='TARGET', y='AMT_ANNUITY', ax=axes[1])
axes[1].set_title('Loan Annuity vs TARGET')

plt.tight_layout()
plt.show()

sns.boxplot(data=data, x='TARGET', y='AMT_CREDIT')
plt.title('Credit Amount vs TARGET')
plt.show()

"""

> Relación entre anualidad del préstamo y dificultades de pago

"""

sns.boxplot(data=data, x='TARGET', y='AMT_ANNUITY')
plt.title('Loan Annuity vs TARGET')
plt.show()

"""

> Distribución del precio de los bienes

"""

sns.histplot(data=data, x='AMT_GOODS_PRICE', bins=50)
plt.title('Goods Price Distribution')
plt.show()

"""
> Relación entre tipo de ingresos y dificultades de pago

"""

sns.countplot(data=data, x='NAME_INCOME_TYPE', hue='TARGET')
plt.title('Income Type vs TARGET')
plt.xticks(rotation=90)
plt.show()

"""

>Relación entre nivel educativo y dificultades de pago

"""

sns.countplot(data=data, x='NAME_EDUCATION_TYPE', hue='TARGET')
plt.title('Education Level vs TARGET')
plt.xticks(rotation=90)
plt.show()

"""

> Situación familiar y dificultades de pago

"""

sns.countplot(data=data, x='NAME_FAMILY_STATUS', hue='TARGET')
plt.title('Family Status vs TARGET')
plt.xticks(rotation=90)
plt.show()

"""

> Situación de vivienda y dificultades de pago

"""

sns.countplot(data=data, x='NAME_HOUSING_TYPE', hue='TARGET')
plt.title('Housing Situation vs TARGET')
plt.xticks(rotation=90)
plt.show()

"""

> Edad del cliente y dificultades de pago

"""

data['AGE_YEARS'] = data['DAYS_BIRTH'] / -365
sns.boxplot(data=data, x='TARGET', y='AGE_YEARS')
plt.title('Client Age vs TARGET')
plt.show()

"""

> Duración en el empleo y dificultades de pago





"""

sns.histplot(data=data, x='DAYS_EMPLOYED', bins=50)
plt.title('Employment Duration (Days)')
plt.show()

"""

> Relación entre el tipo de organización del empleo y dificultades de pago

"""

sns.countplot(data=data, x='ORGANIZATION_TYPE', hue='TARGET')
plt.title('Organization Type vs TARGET')
plt.xticks(rotation=90)
plt.show()

"""> Heat map de correlación


"""

import numpy as np
numeric_data = data.select_dtypes(include=[np.number])

corr = numeric_data.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap (numerical variables)')
plt.show()

"""# Data Cleaning"""

new_column_names = {
    'TARGET': 'Payment_Difficulty',
    'NAME_CONTRACT_TYPE': 'Contract_Type',
    'CODE_GENDER': 'Gender',
    'FLAG_OWN_CAR': 'Own_Car',
    'FLAG_OWN_REALTY': 'Own_Realty',
    'CNT_CHILDREN': 'Number_of_Children',
    'AMT_INCOME_TOTAL': 'Total_Income',
    'AMT_CREDIT': 'Credit_Amount',
    'AMT_ANNUITY': 'Annuity',
    'AMT_GOODS_PRICE': 'Goods_Price',
    'NAME_INCOME_TYPE': 'Income_Type',
    'NAME_EDUCATION_TYPE': 'Education_Level',
    'NAME_FAMILY_STATUS': 'Family_Status',
    'NAME_HOUSING_TYPE': 'Housing_Type',
    'DAYS_BIRTH': 'Age_in_Days',
    'DAYS_EMPLOYED': 'Days_Employed',
    'ORGANIZATION_TYPE': 'Organization_Type'
}

#renombramos
data = data.rename(columns=new_column_names)

data.head()

"""

> **Missing values (null)**

"""

missing_values = data.isnull().sum()
print(missing_values)

"""Accion: Se opto por eliminar las filas con valores faltantes, esto porque:

1. Los valores faltantes son pocos y no representan una porción significativa del dataset.

2. No es posible imputar los valores faltantes de manera precisa, ya sea, usando la media, mediana, regresión, etc. Por lo tanto eliminar las filas puede ser la opción sencilla y segura de evitar sesgos.

"""

#eliminacion de filas con valores null
data_cleaned = data.dropna(subset=['Annuity', 'Goods_Price'])

missing_values = data_cleaned.isnull().sum()
print(missing_values)

"""

> **Manejo de valores atípicos**

"""

data_cleaned.describe()

"""> **Analisis de valores negativos detectados en Age_in_Days y Days_Employed**

**Age_in_Days**
"""

negativos = data_cleaned[data_cleaned['Age_in_Days'] < 0]
print(f"Valores negativos: {len(negativos)}")

porcentaje_negativos = len(negativos) / len(data_cleaned) * 100
print(f"Porcentaje de valores negativos: {porcentaje_negativos:.2f}%")

"""Obs: Todos los valores son negativos

**Conclusion de valores negativos en Age_in_Days** <br>

Los valores negativos no representan un error o anomalias. El dataset Loan Defaulter almacena la edad como el número de días desde el nacimiento hasta la fecha de solicitud representada como un valor negativo. Esto es porque se mide desde una fecha futura hacia atrás (es decir, la fecha actual menos la fecha de nacimiento). Por eso, el valor es negativo, ya que es un conteo hacia atrás desde la fecha actual hasta el nacimiento.
"""

plt.figure(figsize=(10, 6))
plt.hist(negativos['Age_in_Days'], bins=50, color='green', edgecolor='black', alpha=0.7)

plt.title('Distribution of Negative Age_in_Days', fontsize=16, fontweight='bold')
plt.xlabel('Age_in_Days (Negative)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)

plt.grid(True, which='both', linestyle='--', linewidth=0.7, alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.show()

"""**Days_Employed**

De manera similar a Age_in_Days, los valores negativos en este contexto indican el tiempo que la persona ha estado empleada antes de la solicitud. Por ejemplo:
Si un valor es -1000, significa que la persona ha estado trabajando en su empleo actual durante 1000 días (aproximadamente 2.7 años) antes de solicitar el crédito.
"""

#numero valores negativos en la columna Days_Employed
negativos = data_cleaned[data_cleaned['Days_Employed'] < 0]
print(f"Valores negativos: {len(negativos)}")

#porcentaje de valores negativos
porcentaje_negativos = len(negativos) / len(data_cleaned) * 100
print(f"Porcentaje de valores negativos: {porcentaje_negativos:.2f}%")

"""obs: No todos los valores de Days_Employed son negativos, esto indica que hay dos clases de personas en estos datos, una que ha estado desempleada y otra que si ha estado empleada.


"""

plt.figure(figsize=(10, 6))
plt.hist(negativos['Days_Employed'], bins=50, color='blue', edgecolor='black', alpha=0.7)

plt.title('Distribution of Negative Days_Employed', fontsize=16, fontweight='bold')
plt.xlabel('Days Employed (Negative)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)

plt.grid(True, which='both', linestyle='--', linewidth=0.7, alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.show()

#numro los valores positivos en la columna Days_Employed
positivos = data_cleaned[data_cleaned['Days_Employed'] > 0]
print(f"Valores positivos: {len(positivos)}")

# % de valores positivos
porcentaje_positivos = len(positivos) / len(data_cleaned) * 100
print(f"Porcentaje de valores positivos: {porcentaje_positivos:.2f}%")

#valores positivos en Days_Employed
positivos = data[data['Days_Employed'] > 0]

print(positivos['Days_Employed'])

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 7))
plt.hist(data_cleaned['Days_Employed'], bins=50, color='skyblue', edgecolor='black', alpha=0.7)

plt.title('Distribution of Positive and negative Days_Employed', fontsize=16, fontweight='bold')
plt.xlabel('Days Employed (Positive)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)

plt.grid(True, which='both', linestyle='--', linewidth=0.7, alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.show()

"""CONCLUSION VALORES POSITIVOS: <BR>
Se ha detecado valores extremos (365243)<br>
En este contexto este valor anomalo, que representar el estado de "sin empleo" o "desconocido"

> **Manejo de inconsistencias**
"""

print(data_cleaned['Contract_Type'].unique())

print(data_cleaned['Gender'].unique())

print(data_cleaned['Own_Car'].unique())

print(data_cleaned['Own_Realty'].unique())

print(data_cleaned['Number_of_Children'].unique())

print(data_cleaned['Income_Type'].unique())

print(data_cleaned['Education_Level'].unique())

print(data_cleaned['Family_Status'].unique())

print(data_cleaned['Housing_Type'].unique())

print(data_cleaned['Organization_Type'].unique())

"""**CONCLUSION:** <br>No se detectaron inconsistencias, errores tipográficos ni valores de texto inconsistentes en las variables categoricas





"""

print(data_cleaned.dtypes)

# Definir los límites y etiquetas de los grupos de edad
bins = [0, 20, 30, 40, 50, 60, 70, 100]  # Límites de los intervalos
labels = ['<20', '20-30', '31-40', '41-50', '51-60', '61-70', '>70']  # Etiquetas para los grupos

# Crear la nueva columna categórica con los grupos de edad
data_cleaned['Age_Group'] = pd.cut(data_cleaned['AGE_YEARS'], bins=bins, labels=labels, right=False)

print(data_cleaned)

num_filas = len(data_cleaned)

print(f"El número de filas es: {num_filas}")

https://www.youtube.com/watch?v=ZKN2aBmMkCU

data_cleaned.head(200000).to_excel("data_cleaned_sample.xlsx", index=False)